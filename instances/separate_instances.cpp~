#include "../knapsack.hpp"

#include <fstream>
#include <sstream>
#include <iostream>

using namespace std;

int main(int argc, char** argv)
{
	if (argc != 3) 
	{
		fprintf(stderr, "%s <file_containing_mkp_instances> <output_dir>\n", argv[0]);
		exit(1);
	}

	stringstream ssa;
	ssa << argv[1];
	string file= ssa.str();

//	string file(argv[1]);
	ifstream fname(argv[1]);

	const char* fxname = "mkcbres-without-comments.txt";
	ifstream fxvalues (fxname);
	if (!fxvalues.is_open()) exit(0);
	
	int ninstances = 0;
	fname >> ninstances;

	for (int i = 0; i < ninstances; ++i) 
	{				
		int nitems = 0;
		int ndimensions = 0;
		double optimalvalue = 0.0;		

		fname >> nitems;
		fname >> ndimensions;
		fname >> optimalvalue;

		stringstream ss;
		if (i < 10) {
			ss  << argv[2] 
				<< "/" << ndimensions 
				<< "." << nitems << "-0" << i;
		} else {
			ss  << argv[2] 
				<< "/" << ndimensions 
				<< "." << nitems << "-" << i;
		}

		float bestFeasible = 0.0;
		float lpOptimal = 0.0;

		for (int l = 0; l < 270; ++l)
		{		
			string instance_name;
			float  tmp;
			fxvalues >> instance_name;
			fxvalues >> tmp;
			
			stringstream sa;
			sa << "all/" << instance_name;
	//		cout << sa.str() << " " << tmp << " "<< ss.str() <<endl;	

			if (sa.str().compare(ss.str()) == 0 ) {
				bestFeasible = tmp;
			}
		}

		for (int l = 0; l < 270; ++l)
		{		
			string instance_name;
			float  tmp;
			fxvalues >> instance_name;
			fxvalues >> tmp;
			
			stringstream sa;
			sa << "all/" << instance_name;
//			cout << sa.str() << " " << tmp << " "<< ss.str() <<endl;	

			if (sa.str().compare(ss.str()) == 0) {
				lpOptimal = tmp;
			}
		}
		cout << bestFeasible << "\t" << lpOptimal << endl;

		string name= ss.str();
		ofstream instance_i(name.c_str());

		instance_i << nitems << " ";
		instance_i << ndimensions << " ";
		instance_i << bestFeasible << " ";
		instance_i << lpOptimal  << "\n";	

		double profits    = 0.0;
		double bounds     = 0.0;
		double dimensions = 0.0;

		for (int i = 0; i < nitems; ++i) {
		    fname >> profits;
			instance_i << profits << " ";
		}
		instance_i << "\n";

		for (int i = 0; i < ndimensions; ++i) {
		    for (int j = 0; j < nitems; ++j) {
		        fname >> dimensions;
				instance_i << dimensions << " ";
			}
			instance_i << "\n";
		}

		for (int i = 0; i < ndimensions; ++i) {
		    fname >> bounds;
			instance_i << bounds << " ";
		}
		instance_i << "\n";

		instance_i.close();

	}

    fname.close();


	return 0;
}
